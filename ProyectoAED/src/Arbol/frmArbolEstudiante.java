/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Arbol;

import ListasEnlazadas.ListaUsuario;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Hector
 */
public class frmArbolEstudiante extends javax.swing.JFrame {

    /**
     * Creates new form frmArbolEstudiante
     */
    public frmArbolEstudiante() {
        initComponents();
        dtm= (DefaultTableModel)tablaDatos.getModel();
         Object o[]=new Object[5];
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaDatos = new javax.swing.JTable();
        txtApellido = new javax.swing.JTextField();
        txtDNI = new javax.swing.JTextField();
        txtEdad = new javax.swing.JTextField();
        btnInsertar = new javax.swing.JButton();
        btnPreOrden = new javax.swing.JButton();
        btnPostOrden = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        btnBuscar = new javax.swing.JButton();
        txtBuscar = new javax.swing.JTextField();
        btnInorden = new javax.swing.JButton();
        txtvalorAEliminar = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Nombre");

        jLabel2.setText("Apellido");

        jLabel3.setText("DNI");

        jLabel4.setText("Edad");

        tablaDatos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre", "Apellido", "DNI", "Edad"
            }
        ));
        jScrollPane1.setViewportView(tablaDatos);

        btnInsertar.setText("Insertar");
        btnInsertar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertarActionPerformed(evt);
            }
        });

        btnPreOrden.setText("PreOrden");
        btnPreOrden.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPreOrdenActionPerformed(evt);
            }
        });

        btnPostOrden.setText("PostOrden");
        btnPostOrden.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPostOrdenActionPerformed(evt);
            }
        });

        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        jLabel5.setText("Buscar");

        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        btnInorden.setText("Inorden");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(txtApellido, javax.swing.GroupLayout.DEFAULT_SIZE, 143, Short.MAX_VALUE)
                                            .addComponent(txtDNI)))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(txtEdad, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(btnInorden))
                                    .addComponent(btnPreOrden)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnInsertar)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnPostOrden)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(btnEliminar)
                                    .addComponent(jLabel5))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtBuscar, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE)
                                    .addComponent(txtvalorAEliminar))
                                .addGap(18, 18, 18)
                                .addComponent(btnBuscar))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 443, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnInsertar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtApellido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnPostOrden)
                    .addComponent(btnPreOrden))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtDNI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel5)
                                .addComponent(btnBuscar)
                                .addComponent(txtBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(btnInorden)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(txtEdad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnEliminar)
                            .addComponent(txtvalorAEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 11, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    DefaultTableModel dtm;
    
    ListaUsuario LU; 
    
      private void limpiarTabla() {
        for(int i=dtm.getRowCount();i>=1;i--){
            dtm.removeRow(i-1);
        }
    }
    
      // Método que inserta un nuevo nodo en el árbol
      
      // Método para crear un árbol binario ordenado a partir de la tabla de datos
private NodoArbol crearArbolBinarioOrdenado(JTable tabla) {
    NodoArbol raiz = null;
    for (int i = 0; i < tabla.getRowCount(); i++) {
        String nombre = (String) tabla.getValueAt(i, 0);
        String apellido = (String) tabla.getValueAt(i, 1);
        String dni = (String) tabla.getValueAt(i, 2);
        int edad = (int) tabla.getValueAt(i, 3);

        NodoArbol nodo = new NodoArbol(nombre, apellido, dni, edad);
        if (raiz == null) {
            raiz = nodo;
        } else {
            insertarNodo(raiz, nodo);
        }
    }
    return raiz;
}

// Método para insertar un nodo en el árbol binario ordenado
private void insertarNodo(NodoArbol raiz, NodoArbol nodo) {
    if (nodo.getDni().compareTo(raiz.getDni()) < 0) {
        if (raiz.getIzquierda() == null) {
            raiz.setIzquierda(nodo);
        } else {
            insertarNodo(raiz.getIzquierda(), nodo);
        }
    } else {
        if (raiz.getDerecha() == null) {
            raiz.setDerecha(nodo);
        } else {
            insertarNodo(raiz.getDerecha(), nodo);
        }
    }
}
// Método para buscar un nodo en el árbol binario ordenado



    
    private void btnInsertarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertarActionPerformed
        // TODO add your handling code here:
    // Obtener los valores de los JTextField
    String nombre = txtNombre.getText();
    String apellido = txtApellido.getText();
    String dni = txtDNI.getText();
    int edad = Integer.parseInt(txtEdad.getText());

    // Crear un nuevo objeto para almacenar los datos
    Object[] fila = new Object[]{nombre, apellido, dni, edad};

    // Obtener el modelo de la tabla
    DefaultTableModel modelo = (DefaultTableModel) tablaDatos.getModel();

    // Agregar la nueva fila al modelo
    modelo.addRow(fila);

    // Limpiar los campos de texto
    txtNombre.setText("");
    txtApellido.setText("");
    txtDNI.setText("");
    txtEdad.setText("");
    
    
    }//GEN-LAST:event_btnInsertarActionPerformed

    // Método para buscar un nodo en el árbol binario
private NodoArbol buscarNodo(NodoArbol nodo, String valor) {
    if (nodo == null) {
        return null;
    }

    if (nodo.getValor().equals(valor)) {
        return nodo;
    }

    NodoArbol nodoIzquierda = buscarNodo(nodo.getIzquierda(), valor);
    if (nodoIzquierda != null) {
        return nodoIzquierda;
    }

    return buscarNodo(nodo.getDerecha(), valor);
}

// Método para eliminar un nodo del árbol binario
private void eliminarNodo(NodoArbol raiz, NodoArbol nodoAEliminar) {
    if (nodoAEliminar.getIzquierda() == null && nodoAEliminar.getDerecha() == null) {
        // Nodo hoja, simplemente eliminarlo
        eliminarNodoHoja(raiz, nodoAEliminar);
    } else if (nodoAEliminar.getIzquierda() == null) {
        // Nodo con un hijo derecho, reemplazar con el hijo derecho
        reemplazarConHijoDerecho(raiz, nodoAEliminar);
    } else if (nodoAEliminar.getDerecha() == null) {
        // Nodo con un hijo izquierdo, reemplazar con el hijo izquierdo
        reemplazarConHijoIzquierdo(raiz, nodoAEliminar);
    } else {
        // Nodo con dos hijos, encontrar el nodo más cercano y reemplazar
        NodoArbol nodoReemplazo = encontrarNodoReemplazo(nodoAEliminar);
        reemplazarConNodoReemplazo(raiz, nodoAEliminar, nodoReemplazo);
    }
}

// Método para eliminar un nodo hoja
private void eliminarNodoHoja(NodoArbol raiz, NodoArbol nodoAEliminar) {
    if (raiz == nodoAEliminar) {
        raiz = null;
    } else {
        NodoArbol padre = encontrarPadre(raiz, nodoAEliminar);
        if (padre.getIzquierda() == nodoAEliminar) {
            padre.setIzquierda(null);
        } else {
            padre.setDerecha(null);
        }
    }
}

// Método para reemplazar un nodo con su hijo derecho
private void reemplazarConHijoDerecho(NodoArbol raiz, NodoArbol nodoAEliminar) {
    NodoArbol hijoDerecho = nodoAEliminar.getDerecha();
    if (raiz == nodoAEliminar) {
        raiz = hijoDerecho;
    } else {
        NodoArbol padre = encontrarPadre(raiz, nodoAEliminar);
        if (padre.getIzquierda() == nodoAEliminar) {
            padre.setIzquierda(hijoDerecho);
        } else {
            padre.setDerecha(hijoDerecho);
        }
    }
}

// Método para reemplazar un nodo con su hijo izquierdo
private void reemplazarConHijoIzquierdo(NodoArbol raiz, NodoArbol nodoAEliminar) {
    NodoArbol hijoIzquierdo = nodoAEliminar.getIzquierda();
    if (raiz == nodoAEliminar) {
        raiz = hijoIzquierdo;
    } else {
        NodoArbol padre = encontrarPadre(raiz, nodoAEliminar);
        if (padre.getIzquierda() == nodoAEliminar) {
            padre.setIzquierda(hijoIzquierdo);
        } else {
            padre.setDerecha(hijoIzquierdo);
        }
    }
}

// Método para encontrar el nodo más cercano para reemplazar
private NodoArbol encontrarNodoReemplazo(NodoArbol nodoAEliminar) {
    NodoArbol nodoReemplazo = nodoAEliminar.getIzquierda();
    while (nodoReemplazo.getDerecha()!= null) {
        nodoReemplazo = nodoReemplazo.getDerecha();
    }
    return nodoReemplazo;
}

// Método para reemplazar un nodo con el nodo más cercano
private void reemplazarConNodoReemplazo(NodoArbol raiz, NodoArbol nodoAEliminar, NodoArbol nodoReemplazo) {
    if (raiz == nodoAEliminar) {
        raiz = nodoReemplazo;
    } else {
        NodoArbol padre = encontrarPadre(raiz, nodoAEliminar);
        if (padre.getIzquierda() == nodoAEliminar) {
            padre.setIzquierda(nodoReemplazo);
        } else {
            padre.setDerecha(nodoReemplazo);
        }
    }
}

// Método para encontrar el padre de un nodo
private NodoArbol encontrarPadre(NodoArbol raiz, NodoArbol nodo) {
    if (raiz == null) {
        return null;
    }

    if (raiz.getIzquierda() == nodo || raiz.getDerecha() == nodo) {
        return raiz;
    }

    NodoArbol padreIzquierda = encontrarPadre(raiz.getIzquierda(), nodo);
    if (padreIzquierda!= null) {
        return padreIzquierda;
    }

    return encontrarPadre(raiz.getDerecha(), nodo);
}

// Método para actualizar la tabla con los nuevos datos
private void actualizarTabla(NodoArbol raiz) {
    DefaultTableModel modelo = (DefaultTableModel) tablaDatos.getModel();
    modelo.setRowCount(0);

    recorrerArbol(raiz, modelo);
}

// Método para recorrer el árbol binario y agregar los datos a la tabla
private void recorrerArbol(NodoArbol nodo, DefaultTableModel modelo) {
    if (nodo == null) {
        return;
    }

    recorrerArbol(nodo.getIzquierda(), modelo);
    modelo.addRow(new Object[]{nodo.getValor()});
    recorrerArbol(nodo.getDerecha(), modelo);
}
    
    private void btnPreOrdenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPreOrdenActionPerformed
        // TODO add your handling code here:
 
}


        
    }//GEN-LAST:event_btnPreOrdenActionPerformed

    private void btnPostOrdenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPostOrdenActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnPostOrdenActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        // TODO add your handling code here:
   
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        // TODO add your handling code here
        // Obtener la clave de búsqueda
    String dniBuscar = txtDNI.getText();

    // Crear un árbol binario ordenado
    NodoArbol raiz = crearArbolBinarioOrdenado(tablaDatos);

    // Buscar el nodo que coincide con la clave
    NodoArbol nodoEncontrado = buscarNodo(raiz, dniBuscar);

    // Mostrar el resultado de la búsqueda
    if (nodoEncontrado != null) {
        JOptionPane.showMessageDialog(this, "Nodo encontrado: " + nodoEncontrado.getNombre() + " " + nodoEncontrado.getApellido());
    } else {
        JOptionPane.showMessageDialog(this, "Nodo no encontrado");
    }
    }//GEN-LAST:event_btnBuscarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmArbolEstudiante.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmArbolEstudiante.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmArbolEstudiante.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmArbolEstudiante.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmArbolEstudiante().setVisible(true);
            }
        });
    }
// Método para actualizar la tabla con los nuevos datos
private void actualizarTabla() {
    DefaultTableModel modelo = (DefaultTableModel) tablaDatos.getModel();
    modelo.setRowCount(0);
        NodoArbol raiz= null;

    recorrerArbol(raiz, modelo);
    
}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnInorden;
    private javax.swing.JButton btnInsertar;
    private javax.swing.JButton btnPostOrden;
    private javax.swing.JButton btnPreOrden;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablaDatos;
    private javax.swing.JTextField txtApellido;
    private javax.swing.JTextField txtBuscar;
    private javax.swing.JTextField txtDNI;
    private javax.swing.JTextField txtEdad;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtvalorAEliminar;
    // End of variables declaration//GEN-END:variables
}
