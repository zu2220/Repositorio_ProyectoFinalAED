/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Arbol;

import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author Hector
 */
public class frmArbolEstudiante2 extends javax.swing.JFrame { 
    private Nodo raiz;
    private EstudianteAB est;
    ArbolEstudiante AB = new ArbolEstudiante ();
DefaultTableModel dtmTablaDatos;
     Object o[]= new Object[4];
      
     
     
     public void preorden(NodoArbolEstudianteAB nodo) {
      if (nodo!= null) {
       // txtA.append(nodo.dato + "\n"); // Visitar el nodo raíz
      o[0]= nodo.getDato().getNombre();
      o[1]= nodo.getDato().getApellido();
      o[2]= nodo.getDato().getDNI();
      o[3]= nodo.getDato().getEdad();
      
        preorden(nodo.getIzquierda()); // Recorrer el subárbol izquierdo
        preorden(nodo.getDerecha()); // Recorrer el subárbol derecho
        
    }
     
     }
 


   
    
    
    
    /**
     * Creates new form frmArbolEstudiante2
     */
    public frmArbolEstudiante2() {
        
        initComponents();

        dtmTablaDatos=(DefaultTableModel)tablaDatos.getModel();

    }
    
    
    
    
       public void insertar(String nombre, String apellido, String dni, int edad) {
        Nodo nuevoNodo = new Nodo(nombre, apellido, dni, edad);
        Nodo raiz = null;
        if (raiz == null) {
            raiz = nuevoNodo;
        } else {
            insertarRecursivo(raiz, nuevoNodo);
        }
    }

       
       
    private void insertarRecursivo(Nodo actual, Nodo nuevoNodo) {
        if (nuevoNodo.getDni().compareTo(actual.getDni()) < 0) {
            if (actual.getIzquierda() == null) {
                actual.setIzquierda(nuevoNodo);
            } else {
                insertarRecursivo(actual.getIzquierda(), nuevoNodo);
            }
        } else {
            if (actual.getDerecha() == null) {
                actual.setDerecha(nuevoNodo);
            } else {
                insertarRecursivo(actual.getDerecha(), nuevoNodo);
            }
        }
    }

    public void mostrarDatos(JTable tabla) {
        DefaultTableModel modelo = (DefaultTableModel) tabla.getModel();
        modelo.setRowCount(0);
        Nodo raiz = null;
        mostrarDatosRecursivo(raiz, modelo);
    }

    private void mostrarDatosRecursivo(Nodo actual, DefaultTableModel modelo) {
        if (actual != null) {
            modelo.addRow(new Object[]{actual.getNombre(), actual.getApellido(), actual.getDni(), actual.getEdad()});
            mostrarDatosRecursivo(actual.getIzquierda(), modelo);
            mostrarDatosRecursivo(actual.getDerecha(), modelo);
        }
    } 
  
     


    // Método para actualizar la JTable con los datos del árbol
private void actualizarTabla() {
   // Obtener el modelo de tabla asociado a la tabla
    TableModel modelo = tablaDatos.getModel();

    // Iterar sobre las filas de la tabla
    for (int i = 0; i < modelo.getRowCount(); i++) {
        // Iterar sobre las columnas de la tabla
        for (int j = 0; j < modelo.getColumnCount(); j++) {
            // Obtener el valor actual de la celda
            Object valorActual = modelo.getValueAt(i, j);

            // Actualizar el valor de la celda según sea necesario
            // Por ejemplo, si queremos actualizar la celda con un nuevo valor
            Object nuevoValor = obtenerNuevoValor(i, j); // implementar este método
            modelo.setValueAt(nuevoValor, i, j);
        }
    }
    

   
    // Notificar a la tabla que los datos han cambiado
    ((AbstractTableModel) modelo).fireTableDataChanged();
}

private Object obtenerNuevoValor(int fila, int columna) {
    // Supongamos que queremos actualizar la tabla con valores hardcodeados
    if (fila == 0 && columna == 0) {
        return "Nuevo valor 1";
    } else if (fila == 1 && columna == 1) {
        return 20;
    } else {
        return "Valor por defecto";
    }
}


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtApellido = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtDNI = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtEdad = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaDatos = new javax.swing.JTable();
        btnInsertar = new javax.swing.JButton();
        btnInorden = new javax.swing.JButton();
        btnPostOrden = new javax.swing.JButton();
        btnPreOrden = new javax.swing.JButton();
        btnBuscar = new javax.swing.JButton();
        btnBorrado = new javax.swing.JButton();
        btnEliminarIzquierda = new javax.swing.JButton();
        btnEliminarDerecha = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Nombre");

        jLabel2.setText("Apellido");

        jLabel3.setText("DNI");

        jLabel4.setText("Edad");

        tablaDatos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre", "Apellido", "DNI", "Edad"
            }
        ));
        jScrollPane1.setViewportView(tablaDatos);

        btnInsertar.setText("Insercion");
        btnInsertar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertarActionPerformed(evt);
            }
        });

        btnInorden.setText("Inorden");
        btnInorden.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInordenActionPerformed(evt);
            }
        });

        btnPostOrden.setText("PostOrden");
        btnPostOrden.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPostOrdenActionPerformed(evt);
            }
        });

        btnPreOrden.setText("PreOrden");
        btnPreOrden.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPreOrdenActionPerformed(evt);
            }
        });

        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        btnBorrado.setText("Eliminar");
        btnBorrado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBorradoActionPerformed(evt);
            }
        });

        btnEliminarIzquierda.setText("Eliminar Izquierda");
        btnEliminarIzquierda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarIzquierdaActionPerformed(evt);
            }
        });

        btnEliminarDerecha.setText("Eliminar Derecha");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtEdad, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(42, 42, 42)
                        .addComponent(txtDNI))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(txtApellido))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 62, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnPreOrden, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnInsertar, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btnInorden)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnPostOrden))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btnBuscar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnBorrado))))
                    .addComponent(btnEliminarIzquierda)
                    .addComponent(btnEliminarDerecha))
                .addGap(77, 77, 77))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 443, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnInorden)
                    .addComponent(btnPostOrden)
                    .addComponent(btnInsertar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtApellido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnPreOrden)
                    .addComponent(btnBuscar)
                    .addComponent(btnBorrado))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtDNI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEliminarIzquierda))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(txtEdad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(btnEliminarDerecha)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(43, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 11, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
      private void limpiarTabla() {
        for(int i= dtmTablaDatos.getRowCount(); i>=1; i--){
            dtmTablaDatos.removeRow(i-1);
        }
    }
    private void btnInsertarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertarActionPerformed
        // TODO add your handling code here:
   // Obtener los valores de los JTextField
    String nombre = txtNombre.getText();
    String apellido = txtApellido.getText();
   
    int edad = Integer.parseInt(txtEdad.getText());
    int DNI = Integer.parseInt(txtDNI.getText());
    EstudianteAB estudiante= new EstudianteAB(nombre, apellido, DNI, edad);
        o[0]= estudiante.getNombre();
      o[1]= estudiante.getApellido();
      o[2]= estudiante.getDNI();
      o[3]= estudiante.getEdad();
    
      
    

    // Limpiar los campos de texto
    txtNombre.setText("");
    txtDNI.setText("");
    txtApellido.setText("");
    txtEdad.setText("");
    

    AB.insertar(estudiante);
    
    }//GEN-LAST:event_btnInsertarActionPerformed

    private void btnInordenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInordenActionPerformed
        // TODO add your handling code here:
        // Creamos un árbol binario vacío
        
        
        
/*
        NodoArbol raiz = new NodoArbol();
    // Rellenamos el árbol con los datos de la tabla
    for (int i = 0; i < tablaDatos.getRowCount(); i++) {
        String valor = (String) tablaDatos.getValueAt(i, 0); // Suponiendo que la columna 0 es la que contiene los valores
        raiz = insertarNodo(raiz, valor);
    }

    // Realizamos el recorrido inorden y mostramos los resultados
    String resultado = inorden(raiz);
    JOptionPane.showMessageDialog(this, "Recorrido inorden: " + resultado);
     */   
    }//GEN-LAST:event_btnInordenActionPerformed

    private void btnPostOrdenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPostOrdenActionPerformed
        
        JTable tablaDatos= new JTable();
            // Crear un árbol binario con los datos de la JTable
    NodoArbol raiz = crearArbolDesdeJTable(tablaDatos);

    // Recorrer el árbol en postorden
    recorrerPostorden(raiz);
        
            tablaDatos.setToolTipText(obtenerResultadoRecorrido());
    }//GEN-LAST:event_btnPostOrdenActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void btnBorradoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBorradoActionPerformed
        // TODO add your handling code here:
            //No hay un metodo eliminar que elimine todos los elementos del arbol
         //Emplear uno de los 2, ya sea por izquierda o derecha.
         //El borrado va a borrar un nodo especifico, no TODOS LOS ELEMENTOS DEL ARBOL
         //Para eliminar, cumplir las ciertas reglas de la izquierda, y tu codigo diferencie que es una hoja o nodo con ramas.
         //Que no se afecte al eliminar al nodo en especifico
         //1ERO RECORRER Pasar de la izquierda pasar.
         //Si tiene nodo y no tiene mas ramas, lo de izquierda pasa al Nodo que deseas eliminado
         //Si es que tiene mas ramas, entonces paso a su rama derecha y reemplazo a su nodo que se encuentra a la rama derecha
         //al cual deseo eliminar, de su rama derecha y izquierda.
         //despues de al nodo eliminar ---> Va a pasar a la rama derecha del nodo que se encuentra a la rama izquierda del nodo Eliminar por el nodo que se encuentra a la derecha
         // del que se encuentra al nodo eliminar.
         
         
    }//GEN-LAST:event_btnBorradoActionPerformed

    private void btnPreOrdenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPreOrdenActionPerformed
        // TODO add your handling code here:

       

        limpiarTabla();
        AB.recorrerPreorden(AB.getRaiz(), dtmTablaDatos);


    }//GEN-LAST:event_btnPreOrdenActionPerformed

    private void btnEliminarIzquierdaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarIzquierdaActionPerformed
        // TODO add your handling code here:
        int datoaeliminar;
        
        
        
    }//GEN-LAST:event_btnEliminarIzquierdaActionPerformed

    
    // Método para buscar un nodo en el árbol binario de búsqueda
private Nodo buscarNodo(Nodo raiz, String clavePrimaria) {
    if (raiz == null) {
        return null;
    }

    if (raiz.getClavePrimaria().equals(clavePrimaria)) {
        return raiz;
    }

    if (clavePrimaria.compareTo(raiz.getClavePrimaria()) < 0) {
        return buscarNodo(raiz.getIzquierda(), clavePrimaria);
    } else {
        return buscarNodo(raiz.getDerecha(), clavePrimaria);
    }
}


    
    
    
    // Método para eliminar un nodo del árbol binario de búsqueda
private void eliminarNodo(Nodo raiz, Nodo nodoAEliminar) {
    if (nodoAEliminar.getIzquierda() == null && nodoAEliminar.getDerecha() == null) {
        // Caso 1: Nodo hoja
        eliminarNodoHoja(raiz, nodoAEliminar);
    } else if (nodoAEliminar.getIzquierda() == null) {
        // Caso 2: Nodo con un hijo derecho
        reemplazarNodo(raiz, nodoAEliminar, nodoAEliminar.getDerecha());
    } else if (nodoAEliminar.getDerecha() == null) {
        // Caso 3: Nodo con un hijo izquierdo
        reemplazarNodo(raiz, nodoAEliminar, nodoAEliminar.getIzquierda());
    } else {
        // Caso 4: Nodo con dos hijos
        Nodo nodoReemplazo = buscarNodoMasCercano(nodoAEliminar);
        reemplazarNodo(raiz, nodoAEliminar, nodoReemplazo);
    }
}

// Método para eliminar un nodo hoja
private void eliminarNodoHoja(Nodo raiz, Nodo nodoAEliminar) {
    if (raiz.getIzquierda() == nodoAEliminar) {
        raiz.setIzquierda(null);
    } else {
        raiz.setDerecha(null);
    }
}

// Método para reemplazar un nodo
private void reemplazarNodo(Nodo raiz, Nodo nodoAEliminar, Nodo nodoReemplazo) {
    if (raiz.getIzquierda() == nodoAEliminar) {
        raiz.setIzquierda(nodoReemplazo);
    } else {
        raiz.setDerecha(nodoReemplazo);
    }
}

// Método para buscar el nodo más cercano a un nodo dado
private Nodo buscarNodoMasCercano(Nodo nodo) {
    if (nodo.getIzquierda() != null) {
        return buscarNodoMasCercano(nodo.getIzquierda());
    } else {
        return nodo.getDerecha();
    }
}
    
    
    
    
    
    // Método para crear un árbol binario desde la JTable
private NodoArbol crearArbolDesdeJTable(JTable tabla) {
    NodoArbol raiz = null;
    for (int i = 0; i < tabla.getRowCount(); i++) {
        String nombre = (String) tabla.getValueAt(i, 0);
        String apellido = (String) tabla.getValueAt(i, 1);
        String dni = (String) tabla.getValueAt(i, 2);
        int edad = (int) tabla.getValueAt(i, 3);

        NodoArbol nodo = new NodoArbol(nombre, apellido, dni, edad);
        if (raiz == null) {
            raiz = nodo;
        } else {
            agregarNodo(raiz, nodo);
        }
    }
    return raiz;
}
    
    
    // Método para agregar un nodo al árbol binario
private void agregarNodo(NodoArbol raiz, NodoArbol nodo) {
    if (nodo.dni.compareTo(raiz.dni) < 0) {
        if (raiz.izquierdo == null) {
            raiz.izquierdo = nodo;
        } else {
            agregarNodo(raiz.izquierdo, nodo);
        }
    } else {
        if (raiz.derecho == null) {
            raiz.derecho = nodo;
        } else {
            agregarNodo(raiz.derecho, nodo);
        }
    }
}

// Método para recorrer el árbol en postorden
private void recorrerPostorden(NodoArbol nodo) {
    if (nodo!= null) {
        recorrerPostorden(nodo.izquierdo);
        recorrerPostorden(nodo.derecho);
        // Visitar el nodo raíz
       
    }
}



// Método para obtener el resultado del recorrido
private String obtenerResultadoRecorrido() {
    // Aquí puedes concatenar los resultados del recorrido en una cadena
    // y devolverla
    return "";
}
    
    // Método para insertar un nodo en el árbol binario
private NodoArbol insertarNodo(NodoArbol raiz, String valor) {
    if (raiz != null) {
        raiz = new NodoArbol(valor);
    } else if (valor.compareTo(raiz.valor) < 0) {
        raiz.izquierdo = insertarNodo(raiz.izquierdo, valor);
    } else {
        raiz.derecho = insertarNodo(raiz.derecho, valor);
    }
    return raiz;
}

// Método para realizar el recorrido inorden
private String inorden(NodoArbol raiz) {
    if (raiz == null) {
        return "";
    } else {
        return inorden(raiz.izquierdo) + raiz.valor + " " + inorden(raiz.derecho);
    }
}
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmArbolEstudiante2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmArbolEstudiante2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmArbolEstudiante2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmArbolEstudiante2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmArbolEstudiante2().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBorrado;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnEliminarDerecha;
    private javax.swing.JButton btnEliminarIzquierda;
    private javax.swing.JButton btnInorden;
    private javax.swing.JButton btnInsertar;
    private javax.swing.JButton btnPostOrden;
    private javax.swing.JButton btnPreOrden;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablaDatos;
    private javax.swing.JTextField txtApellido;
    private javax.swing.JTextField txtDNI;
    private javax.swing.JTextField txtEdad;
    private javax.swing.JTextField txtNombre;
    // End of variables declaration//GEN-END:variables

  
}


